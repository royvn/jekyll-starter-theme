{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/templates/article.js","webpack:///./src/components/seo.js"],"names":["Layout","children","data","className","siteTitle","site","siteMetadata","title","id","post","markdownRemark","frontmatter","description","excerpt","to","date","categories","fluid","image","childImageSharp","alt","style","maxWidth","dangerouslySetInnerHTML","__html","html","query","SEO","lang","meta","metaDescription","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"kKA0CeA,IA3BA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEVC,EAAI,OAUV,OACE,yBAAKC,UAAU,WACb,kBAAC,IAAD,CAAQC,UAAWF,EAAKG,KAAKC,aAAaC,QAC1C,0BAAMJ,UAAU,OAAOK,GAAG,WACvBP,GAEH,kBAAC,IAAD,CAAQG,UAAWF,EAAKG,KAAKC,aAAaC,W,kCCjChD,+HAOe,sBAAe,IACtBE,EADqB,EAAXP,KACEQ,eAClB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKH,MAAOE,EAAKE,YAAYJ,MAAOK,YAAaH,EAAKI,UACtD,6BAASV,UAAU,QACjB,4BAAQA,UAAU,eAChB,yBAAKA,UAAU,kDACb,yBAAKA,UAAU,6DACb,kBAAC,OAAD,CAAMW,GAAG,QAAQX,UAAU,QAA3B,wBAGA,wBAAIA,UAAU,cACXM,EAAKE,YAAYJ,OAEpB,uBAAGJ,UAAU,aAAb,gBACgBM,EAAKE,YAAYI,KADjC,OAC2CN,EAAKE,YAAYK,aAG9D,yBAAKb,UAAU,4DACX,yBAAKA,UAAU,cACb,kBAAC,IAAD,CAAKc,MAAOR,EAAKE,YAAYO,MAAMC,gBAAgBF,MAAOG,IAAKX,EAAKE,YAAYJ,MAAOc,MAAO,CAACC,SAAU,YAMnH,yBAAKnB,UAAU,+BACb,yBAAKoB,wBAAyB,CAAEC,OAAQf,EAAKgB,MAAQtB,UAAU,mEAsClE,IAAMuB,EAAK,c,4FC7DlB,SAASC,EAAT,GAAkD,IAAnCf,EAAkC,EAAlCA,YAAagB,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMtB,EAAS,EAATA,MAC9BF,EADuC,OACvCA,KAcFyB,EAAkBlB,GAAeP,EAAKC,aAAaM,YAEzD,OACE,kBAAC,IAAD,CACEmB,eAAgB,CACdH,QAEFrB,MAAOA,EACPyB,cAAa,QAAU3B,EAAKC,aAAaC,MACzCsB,KAAM,CACJ,CACEI,KAAK,cACLC,QAASJ,GAEX,CACEK,SAAS,WACTD,QAAS3B,GAEX,CACE4B,SAAS,iBACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAAS7B,EAAKC,aAAa8B,QAE7B,CACEH,KAAK,gBACLC,QAAS3B,GAEX,CACE0B,KAAK,sBACLC,QAASJ,IAEXO,OAAOR,KAKfF,EAAIW,aAAe,CACjBV,KAAK,KACLC,KAAM,GACNjB,YAAY,0CAUCe","file":"component---src-templates-article-js-fecfd66cbb3711ffc300.js","sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Notice from \"./Notice\";\n\nconst Layout = ({ children }) => {\n\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <div className=\"wrapper\">\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <main className=\"main\" id=\"content\">\n        {children}\n      </main>\n      <Footer siteTitle={data.site.siteMetadata.title} />\n    </div>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { graphql, Link } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\n\nexport default ({ data }) => {\n  const post = data.markdownRemark;\n  return (\n    <Layout>\n      <SEO title={post.frontmatter.title} description={post.excerpt} />\n      <article className=\"post\">\n        <header className=\"post-header\">\n          <div className=\"page-width page-spacer grid align-items-center\">\n            <div className=\"post-header__content gcs-xs-1 gce-xs-13 gcs-lg-1 gce-lg-5\">\n              <Link to=\"/blog\" className=\"back\">\n                Terug naar overzicht\n              </Link>\n              <h1 className=\"post-title\">\n                {post.frontmatter.title}\n              </h1>\n              <p className=\"post-meta\">\n                Geplaatst op {post.frontmatter.date} in {post.frontmatter.categories}\n              </p>\n            </div>\n            <div className=\"post-header__image gcs-xs-1 gce-xs-13 gcs-lg-6 gce-lg-13\">\n                <div className=\"post-image\">\n                  <Img fluid={post.frontmatter.image.childImageSharp.fluid} alt={post.frontmatter.title} style={{maxWidth: 1024}} />\n                </div>\n              </div>\n          </div>\n        </header>\n\n        <div className=\"page-width page-spacer grid\">\n          <div dangerouslySetInnerHTML={{ __html: post.html }} className=\"post-content content gcs-xs-1 gce-xs-13 gcs-lg-3 gce-lg-11\" />\n        </div>\n\n        {/* <div className=\"grid\">\n          <div className=\"grid__item grid__item--12\">\n            <h2>\n              Bekijk ook\n            </h2>\n          </div>\n        </div> */}\n\n        {/* <nav className=\"post-navigation\">\n          <a href=\"\" className=\"post-navigation__url post-navigation__url--has-image\">\n            <div>\n              <span className=\"post-navigation__subtitle\">\n                Vorig artikel\n              </span>\n              <span className=\"post-navigation__title\">\n                page.previous.title\n              </span>\n            </div>\n            <img src=\" page.previous.image \" alt=\"page.previous.title\" />\n          </a>\n          <a href=\"#\" className=\"post-navigation__url post-navigation__url--has-image\">\n            <div>\n              <span className=\"post-navigation__subtitle\">Volgend artikel</span>\n              <span className=\"post-navigation__title\">\n                page.next.title\n              </span>\n            </div>\n            <img src=\"page.next.image\" alt=\"page.next.title\" />\n          </a>      \n        </nav> */}\n      </article>\n    </Layout>\n  )\n};\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        date(formatString: \"DD MM YYYY\")\n        image {\n          childImageSharp {\n            fluid(maxWidth: 1200, quality: 100) {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n        categories\n        tags\n        author\n      }\n      excerpt(pruneLength: 160)\n      timeToRead\n    }\n  }\n`;","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `nl`,\n  meta: [],\n  description: `Designer & developer in regio Den Haag`,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO;\n"],"sourceRoot":""}